/**
 * @module gallery-qr-code-generator-base
 */
(function (Y) {
    'use strict';
    
    var _string__empty = '',
        _string_initOnly = 'initOnly',
        _string_numeric = 'numeric',
        
        _alignmentPatternLocations = [[
            18
        ], [
            22
        ], [
            26
        ], [
            30
        ], [
            34
        ], [
            22,
            38
        ], [
            24,
            42
        ], [
            26,
            46
        ], [
            28,
            50
        ], [
            30,
            54
        ], [
            32,
            58
        ], [
            34,
            62
        ], [
            26,
            46,
            66
        ], [
            26,
            48,
            70
        ], [
            26,
            50,
            74
        ], [
            30,
            54,
            78
        ], [
            30,
            56,
            82
        ], [
            30,
            58,
            86
        ], [
            34,
            62,
            90
        ], [
            28,
            50,
            72,
            94
        ], [
            26,
            50,
            74,
            98
        ], [
            30,
            54,
            78,
            102
        ], [
            28,
            54,
            80,
            106
        ], [
            32,
            58,
            84,
            110
        ], [
            30,
            58,
            86,
            114
        ], [
            34,
            62,
            90,
            118
        ], [
            26,
            50,
            74,
            98,
            122
        ], [
            30,
            54,
            78,
            102,
            126
        ], [
            26,
            52,
            78,
            104,
            130
        ], [
            30,
            56,
            82,
            108,
            134
        ], [
            34,
            60,
            86,
            112,
            138
        ], [
            30,
            58,
            86,
            114,
            142
        ], [
            34,
            62,
            90,
            118,
            146
        ], [
            30,
            54,
            78,
            102,
            126,
            150
        ], [
            24,
            50,
            76,
            102,
            128,
            154
        ], [
            28,
            54,
            80,
            106,
            132,
            158
        ], [
            32,
            58,
            84,
            110,
            136,
            162
        ], [
            26,
            54,
            82,
            110,
            138,
            166
        ], [
            30,
            58,
            86,
            114,
            142,
            170
        ]],
        _alpha = [
            1,
            2,
            4,
            8,
            16,
            32,
            64,
            128,
            29,
            58,
            116,
            232,
            205,
            135,
            19,
            38,
            76,
            152,
            45,
            90,
            180,
            117,
            234,
            201,
            143,
            3,
            6,
            12,
            24,
            48,
            96,
            192,
            157,
            39,
            78,
            156,
            37,
            74,
            148,
            53,
            106,
            212,
            181,
            119,
            238,
            193,
            159,
            35,
            70,
            140,
            5,
            10,
            20,
            40,
            80,
            160,
            93,
            186,
            105,
            210,
            185,
            111,
            222,
            161,
            95,
            190,
            97,
            194,
            153,
            47,
            94,
            188,
            101,
            202,
            137,
            15,
            30,
            60,
            120,
            240,
            253,
            231,
            211,
            187,
            107,
            214,
            177,
            127,
            254,
            225,
            223,
            163,
            91,
            182,
            113,
            226,
            217,
            175,
            67,
            134,
            17,
            34,
            68,
            136,
            13,
            26,
            52,
            104,
            208,
            189,
            103,
            206,
            129,
            31,
            62,
            124,
            248,
            237,
            199,
            147,
            59,
            118,
            236,
            197,
            151,
            51,
            102,
            204,
            133,
            23,
            46,
            92,
            184,
            109,
            218,
            169,
            79,
            158,
            33,
            66,
            132,
            21,
            42,
            84,
            168,
            77,
            154,
            41,
            82,
            164,
            85,
            170,
            73,
            146,
            57,
            114,
            228,
            213,
            183,
            115,
            230,
            209,
            191,
            99,
            198,
            145,
            63,
            126,
            252,
            229,
            215,
            179,
            123,
            246,
            241,
            255,
            227,
            219,
            171,
            75,
            150,
            49,
            98,
            196,
            149,
            55,
            110,
            220,
            165,
            87,
            174,
            65,
            130,
            25,
            50,
            100,
            200,
            141,
            7,
            14,
            28,
            56,
            112,
            224,
            221,
            167,
            83,
            166,
            81,
            162,
            89,
            178,
            121,
            242,
            249,
            239,
            195,
            155,
            43,
            86,
            172,
            69,
            138,
            9,
            18,
            36,
            72,
            144,
            61,
            122,
            244,
            245,
            247,
            243,
            251,
            235,
            203,
            139,
            11,
            22,
            44,
            88,
            176,
            125,
            250,
            233,
            207,
            131,
            27,
            54,
            108,
            216,
            173,
            71,
            142
        ],
        _codewordCount = {
            M1: {
                E: [
                    3,
                    1,
                    3,
                    2
                ]
            },
            M2: {
                L: [
                    5,
                    1,
                    5,
                    5
                ],
                M: [
                    4,
                    1,
                    4,
                    6
                ]
            },
            M3: {
                L: [
                    11,
                    1,
                    11,
                    6
                ],
                M: [
                    9,
                    1,
                    9,
                    8
                ]
            },
            M4: {
                L: [
                    16,
                    1,
                    16,
                    8
                ],
                M: [
                    14,
                    1,
                    14,
                    10
                ],
                Q: [
                    10,
                    1,
                    10,
                    14
                ]
            },
            1: {
                H: [
                    9,
                    1,
                    9,
                    17
                ],
                L: [
                    19,
                    1,
                    19,
                    7
                ],
                M: [
                    16,
                    1,
                    16,
                    10
                ],
                Q: [
                    13,
                    1,
                    13,
                    13
                ]
            },
            2: {
                H: [
                    16,
                    1,
                    16,
                    28
                ],
                L: [
                    34,
                    1,
                    34,
                    10
                ],
                M: [
                    28,
                    1,
                    28,
                    16
                ],
                Q: [
                    22,
                    1,
                    22,
                    22
                ]
            },
            3: {
                H: [
                    26,
                    2,
                    13,
                    22
                ],
                L: [
                    55,
                    1,
                    55,
                    15
                ],
                M: [
                    44,
                    1,
                    44,
                    26
                ],
                Q: [
                    34,
                    2,
                    17,
                    18
                ]
            },
            4: {
                H: [
                    36,
                    4,
                    9,
                    16
                ],
                L: [
                    80,
                    1,
                    80,
                    20
                ],
                M: [
                    64,
                    2,
                    32,
                    18
                ],
                Q: [
                    48,
                    2,
                    24,
                    26
                ]
            },
            5: {
                H: [
                    46,
                    2,
                    11,
                    22
                ],
                L: [
                    108,
                    1,
                    108,
                    26
                ],
                M: [
                    86,
                    2,
                    43,
                    24
                ],
                Q: [
                    62,
                    2,
                    15,
                    18
                ]
            },
            6: {
                H: [
                    60,
                    4,
                    15,
                    28
                ],
                L: [
                    136,
                    2,
                    68,
                    18
                ],
                M: [
                    108,
                    4,
                    27,
                    16
                ],
                Q: [
                    76,
                    4,
                    19,
                    24
                ]
            },
            7: {
                H: [
                    66,
                    4,
                    13,
                    26
                ],
                L: [
                    156,
                    2,
                    78,
                    20
                ],
                M: [
                    124,
                    4,
                    31,
                    18
                ],
                Q: [
                    88,
                    2,
                    14,
                    18
                ]
            },
            8: {
                H: [
                    86,
                    4,
                    14,
                    26
                ],
                L: [
                    194,
                        2,
                        97,
                        24
                ],
                M: [
                    154,
                    2,
                    38,
                    22
                ],
                Q: [
                    110,
                    4,
                    18,
                    22
                ]
            },
            9: {
                H: [
                    100,
                    4,
                    12,
                    24
                ],
                L: [
                    232,
                    2,
                    116,
                    30
                ],
                M: [
                    182,
                    3,
                    36,
                    22
                ],
                Q: [
                    132,
                    4,
                    16,
                    20
                ]
            },
            10: {
                H: [
                    122,
                    6,
                    15,
                    28
                ],
                L: [
                    274,
                    2,
                    68,
                    18
                ],
                M: [
                    216,
                    4,
                    43,
                    26
                ],
                Q: [
                    154,
                    6,
                    19,
                    22
                ]
            },
            11: {
                H: [
                    140,
                    3,
                    12,
                    24
                ],
                L: [
                    324,
                        4,
                        81,
                        20
                ],
                M: [
                    254,
                    1,
                    50,
                    30
                ],
                Q: [
                    180,
                    4,
                    22,
                    28
                ]
            },
            12: {
                H: [
                    158,
                    7,
                    14,
                    28
                ],
                L: [
                    370,
                    2,
                    92,
                    24
                ],
                M: [
                    290,
                    6,
                    36,
                    22
                ],
                Q: [
                    206,
                    4,
                    20,
                    26
                ]
            },
            13: {
                H: [
                    180,
                    12,
                    11,
                    22
                ],
                L: [
                    428,
                    4,
                    107,
                    26
                ],
                M: [
                    334,
                    8,
                    37,
                    22
                ],
                Q: [
                    244,
                    8,
                    20,
                    24
                ]
            },
            14: {
                H: [
                    197,
                    11,
                    12,
                    24
                ],
                L: [
                    461,
                    3,
                    115,
                    30
                ],
                M: [
                    365,
                    4,
                    40,
                    24
                ],
                Q: [
                    261,
                    11,
                    16,
                    20
                ]
            },
            15: {
                H: [
                    223,
                   11,
                   12,
                   24
                ],
                L: [
                    523,
                    5,
                    87,
                    22
                ],
                M: [
                    415,
                    5,
                    41,
                    24
                ],
                Q: [
                    295,
                    5,
                    24,
                    30
                ]
            },
            16: {
                H: [
                    253,
                    3,
                    15,
                    30
                ],
                L: [
                    589,
                    5,
                    98,
                    24
                ],
                M: [
                    453,
                    7,
                    45,
                    28
                ],
                Q: [
                    325,
                    15,
                    19,
                    24
                ]
            },
            17: {
                H: [
                    283,
                    2,
                    14,
                    28
                ],
                L: [
                    647,
                    1,
                    107,
                    28
                ],
                M: [
                    507,
                    10,
                    46,
                    28
                ],
                Q: [
                    367,
                    1,
                    22,
                    28
                ]
            },
            18: {
                H: [
                    313,
                    2,
                    14,
                    28
                ],
                L: [
                    721,
                    5,
                    120,
                    30
                ],
                M: [
                    563,
                    9,
                    43,
                    26
                ],
                Q: [
                    397,
                    17,
                    22,
                    28
                ]
            },
            19: {
                H: [
                    341,
                    9,
                    13,
                    26
                ],
                L: [
                    795,
                    3,
                    113,
                    28
                ],
                M: [
                    627,
                    3,
                    44,
                    26
                ],
                Q: [
                    445,
                    17,
                    21,
                    26
                ]
            },
            20: {
                H: [
                    385,
                    15,
                    15,
                    28
                ],
                L: [
                    861,
                    3,
                    107,
                    28
                ],
                M: [
                    669,
                    3,
                    41,
                    26
                ],
                Q: [
                    485,
                    15,
                    24,
                    30
                ]
            },
            21: {
                H: [
                    406,
                    19,
                    16,
                    30
                ],
                L: [
                    932,
                    4,
                    116,
                    28
                ],
                M: [
                    714,
                    17,
                    42,
                    26
                ],
                Q: [
                    512,
                    17,
                    22,
                    28
                ]
            },
            22: {
                H: [
                    442,
                    34,
                    13,
                    24
                ],
                L: [
                    1006,
                    2,
                    111,
                    28
                ],
                M: [
                    782,
                    17,
                    46,
                    28
                ],
                Q: [
                    568,
                    7,
                    24,
                    30
                ]
            },
            23: {
                H: [
                    464,
                    16,
                    15,
                    30
                ],
                L: [
                    1094,
                    4,
                    121,
                    30
                ],
                M: [
                    860,
                    4,
                    47,
                    28
                ],
                Q: [
                    614,
                    11,
                    24,
                    30
                ]
            },
            24: {
                H: [
                    514,
                    30,
                    16,
                    30
                ],
                L: [
                    1174,
                    6,
                    117,
                    30
                ],
                M: [
                    914,
                    6,
                    45,
                    28
                ],
                Q: [
                    664,
                    11,
                    24,
                    30
                ]
            },
            25: {
                H: [
                    538,
                    22,
                    15,
                    30
                ],
                L: [
                    1276,
                    8,
                    106,
                    26
                ],
                M: [
                    1000,
                    8,
                    47,
                    28
                ],
                Q: [
                    718,
                    7,
                    24,
                    30
                ]
            },
            26: {
                H: [
                    596,
                    33,
                    16,
                    30
                ],
                L: [
                    1370,
                    10,
                    114,
                    28
                ],
                M: [
                    1062,
                    19,
                    46,
                    28
                ],
                Q: [
                    754,
                    28,
                    22,
                    28
                ]
            },
            27: {
                H: [
                    628,
                    12,
                    15,
                    30
                ],
                L: [
                    1468,
                    8,
                    122,
                    30
                ],
                M: [
                    1128,
                    22,
                    45,
                    28
                ],
                Q: [
                    808,
                    8,
                    23,
                    30
                ]
            },
            28: {
                H: [
                    661,
                    11,
                    15,
                    30
                ],
                L: [
                    1531,
                    3,
                    117,
                    30
                ],
                M: [
                    1193,
                    3,
                    45,
                    28
                ],
                Q: [
                    871,
                    4,
                    24,
                    30
                ]
            },
            29: {
                H: [
                    701,
                    19,
                    15,
                    30
                ],
                L: [
                    1631,
                    7,
                    116,
                    30
                ],
                M: [
                    1267,
                    21,
                    45,
                    28
                ],
                Q: [
                    911,
                    1,
                    23,
                    30
                ]
            },
            30: {
                H: [
                    745,
                    23,
                    15,
                    30
                ],
                L: [
                    1735,
                    5,
                    115,
                    30
                ],
                M: [
                    1373,
                    19,
                    47,
                    28
                ],
                Q: [
                    985,
                    15,
                    30
                ]
            },
            31: {
                H: [
                    793,
                    23,
                    15,
                    30
                ],
                L: [
                    1843,
                    13,
                    115,
                    30
                ],
                M: [
                    1455,
                    2,
                    46,
                    28
                ],
                Q: [
                    1033,
                    42,
                    24,
                    30
                ]
            },
            32: {
                H: [
                    845,
                    19,
                    15,
                    30
                ],
                L: [
                    1955,
                    17,
                    115,
                    30
                ],
                M: [
                    1541,
                    10,
                    46,
                    28
                ],
                Q: [
                    1115,
                    10,
                    24,
                    30
                ]
            },
            33: {
                H: [
                    901,
                    11,
                    15,
                    30
                ],
                L: [
                    2071,
                    17,
                    115,
                    30
                ],
                M: [
                    1631,
                    14,
                    46,
                    28
                ],
                Q: [
                    1171,
                    29,
                    24,
                    30
                ]
            },
            34: {
                H: [
                    961,
                    59,
                    16,
                    30
                ],
                L: [
                    2191,
                    13,
                    115,
                    30
                ],
                M: [
                    1725,
                    14,
                    46,
                    28
                ],
                Q: [
                    1231,
                    44,
                    24,
                    30
                ]
            },
            35: {
                H: [
                    986,
                    22,
                    15,
                    30
                ],
                L: [
                    2306,
                    12,
                    121,
                    30
                ],
                M: [
                    1812,
                    12,
                    47,
                    28
                ],
                Q: [
                    1286,
                    39,
                    24,
                    30
                ]
            },
            36: {
                H: [
                    1054,
                    2,
                    15,
                    30
                ],
                L: [
                    2434,
                    6,
                    121,
                    30
                ],
                M: [
                    1914,
                    6,
                    47,
                    28
                ],
                Q: [
                    1354,
                    46,
                    24,
                    30
                ]
            },
            37: {
                H: [
                    1096,
                    24,
                    15,
                    30
                ],
                L: [
                    2566,
                    17,
                    122,
                    30
                ],
                M: [
                    1992,
                    29,
                    46,
                    28
                ],
                Q: [
                    1426,
                    49,
                    24,
                    30
                ]
            },
            38: {
                H: [
                    1142,
                    42,
                    15,
                    30
                ],
                L: [
                    2702,
                    4,
                    122,
                    30
                ],
                M: [
                    2102,
                    13,
                    46,
                    28
                ],
                Q: [
                    1502,
                    48,
                    24,
                    30
                ]
            },
            39: {
                H: [
                    1222,
                    10,
                    15,
                    30
                ],
                L: [
                    2812,
                    20,
                    117,
                    30
                ],
                M: [
                    2216,
                    40,
                    47,
                    28
                ],
                Q: [
                    1582,
                    43,
                    24,
                    30
                ]
            },
            40: {
                H: [
                    1276,
                    20,
                    15,
                    30
                ],
                L: [
                    2956,
                    19,
                    118,
                    30
                ],
                M: [
                    2334,
                    18,
                    47,
                    28
                ],
                Q: [
                    1666,
                    34,
                    24,
                    30
                ]
            }
        },
        _dataTypes = {
            alphanumeric: 'alphanumeric',
            numeric: _string_numeric,
            ucs2: 'ucs2' // ECI 000025
        },
        _formatInformation = [
            21522,
            20773,
            24188,
            23371,
            17913,
            16590,
            20375,
            19104,
            30660,
            29427,
            32170,
            30877,
            26159,
            25368,
            27713,
            26998,
            5769,
            5054,
            7399,
            6608,
            1890,
            597,
            3340,
            2107,
            13663,
            12392,
            16177,
            14854,
            9396,
            8579,
            11994,
            11245
        ],
        _generatorAlphaIndicies = {
            2: [
                25,
                1
            ],
            5: [
                113,
                164,
                166,
                119,
                10
            ],
            6: [
                116,
                0,
                134,
                5,
                176,
                15
            ],
            7: [
                87,
                299,
                146,
                149,
                238,
                102,
                21
            ],
            8: [
                175,
                238,
                208,
                249,
                215,
                252,
                196,
                28
            ],
            10: [
                251,
                67,
                46,
                61,
                118,
                70,
                64,
                94,
                32,
                45
            ],
            13: [
                74,
                152,
                176,
                100,
                86,
                100,
                106,
                104,
                130,
                218,
                206,
                140,
                78
            ],
            14: [
                199,
                249,
                155,
                48,
                190,
                124,
                218,
                137,
                216,
                87,
                207,
                59,
                22,
                91
            ],
            15: [
                8,
                183,
                61,
                91,
                202,
                37,
                51,
                58,
                58,
                237,
                140,
                124,
                5,
                99,
                105
            ],
            16: [
                120,
                104,
                107,
                109,
                102,
                161,
                76,
                3,
                91,
                191,
                147,
                169,
                182,
                194,
                225,
                120
            ],
            18: [
                215,
                234,
                158,
                94,
                184,
                97,
                118,
                170,
                79,
                187,
                152,
                148,
                252,
                179,
                5,
                98,
                96,
                153
            ],
            20: [
                17,
                60,
                79,
                50,
                61,
                163,
                26,
                187,
                202,
                180,
                221,
                225,
                83,
                239,
                156,
                164,
                212,
                212,
                188,
                190
            ],
            22: [
                210,
                171,
                247,
                242,
                93,
                230,
                14,
                109,
                221,
                53,
                200,
                74,
                8,
                172,
                98,
                80,
                219,
                134,
                160,
                105,
                165,
                231
            ],
            24: [
                229,
                121,
                135,
                48,
                211,
                117,
                251,
                126,
                159,
                180,
                169,
                152,
                192,
                226,
                228,
                218,
                111,
                0,
                117,
                232,
                87,
                96,
                227,
                21
            ],
            26: [
                173,
                125,
                158,
                2,
                103,
                182,
                118,
                17,
                145,
                201,
                111,
                28,
                165,
                53,
                161,
                21,
                245,
                142,
                13,
                102,
                48,
                227,
                153,
                145,
                218,
                70
            ],
            28: [
                168,
                223,
                200,
                104,
                224,
                234,
                108,
                180,
                110,
                190,
                195,
                147,
                205,
                27,
                232,
                201,
                21,
                43,
                245,
                87,
                42,
                195,
                212,
                119,
                242,
                37,
                9,
                123
            ],
            30: [
                41,
                173,
                145,
                152,
                216,
                31,
                179,
                182,
                50,
                48,
                110,
                86,
                239,
                96,
                222,
                125,
                42,
                173,
                226,
                193,
                224,
                130,
                156,
                37,
                251,
                216,
                238,
                40,
                192,
                180
            ],
            32: [
                10,
                6,
                106,
                190,
                249,
                167,
                4,
                67,
                209,
                138,
                138,
                32,
                242,
                123,
                89,
                27,
                120,
                185,
                80,
                156,
                38,
                69,
                171,
                60,
                28,
                222,
                80,
                52,
                254,
                185,
                220,
                241
            ],
            34: [
                111,
                77,
                146,
                94,
                26,
                21,
                108,
                19,
                105,
                94,
                113,
                193,
                86,
                140,
                163,
                125,
                58,
                158,
                229,
                239,
                218,
                103,
                56,
                70,
                114,
                61,
                183,
                129,
                167,
                13,
                98,
                62,
                129,
                51
            ],
            36: [
                200,
                183,
                98,
                16,
                172,
                31,
                246,
                234,
                60,
                152,
                115,
                24,
                167,
                152,
                113,
                248,
                238,
                107,
                18,
                63,
                218,
                37,
                87,
                210,
                105,
                177,
                120,
                74,
                121,
                196,
                117,
                251,
                113,
                233,
                30,
                120
            ],
            40: [
                59,
                116,
                79,
                161,
                252,
                98,
                128,
                205,
                128,
                161,
                247,
                57,
                163,
                56,
                235,
                106,
                53,
                26,
                187,
                174,
                226,
                104,
                170,
                7,
                175,
                35,
                181,
                114,
                88,
                41,
                47,
                163,
                125,
                134,
                72,
                20,
                232,
                53,
                35,
                15
            ],
            42: [
                250,
                103,
                221,
                230,
                25,
                18,
                137,
                231,
                0,
                3,
                58,
                242,
                221,
                191,
                110,
                84,
                230,
                8,
                188,
                106,
                96,
                147,
                15,
                131,
                139,
                34,
                101,
                223,
                39,
                101,
                213,
                199,
                237,
                254,
                201,
                123,
                171,
                162,
                194,
                117,
                50,
                96
            ],
            44: [
                190,
                7,
                61,
                121,
                71,
                246,
                69,
                55,
                168,
                188,
                89,
                243,
                191,
                25,
                72,
                123,
                9,
                145,
                14,
                247,
                1,
                238,
                44,
                78,
                143,
                62,
                224,
                126,
                118,
                114,
                68,
                163,
                52,
                194,
                217,
                147,
                204,
                169,
                37,
                130,
                113,
                102,
                73,
                181
            ],
            46: [
                112,
                94,
                88,
                112,
                253,
                224,
                202,
                115,
                187,
                99,
                89,
                5,
                54,
                113,
                129,
                44,
                58,
                16,
                135,
                216,
                169,
                211,
                36,
                1,
                4,
                96,
                60,
                241,
                73,
                104,
                234,
                8,
                249,
                245,
                119,
                174,
                52,
                25,
                157,
                224,
                43,
                202,
                223,
                19,
                82,
                15
            ],
            48: [
                228,
                25,
                196,
                130,
                211,
                146,
                60,
                24,
                251,
                90,
                39,
                102,
                240,
                61,
                178,
                63,
                46,
                123,
                115,
                18,
                221,
                111,
                135,
                160,
                182,
                205,
                107,
                206,
                95,
                150,
                120,
                184,
                91,
                21,
                247,
                156,
                140,
                238,
                191,
                11,
                94,
                227,
                84,
                50,
                163,
                39,
                34,
                108
            ],
            50: [
                232,
                125,
                157,
                161,
                164,
                9,
                118,
                46,
                209,
                99,
                203,
                193,
                35,
                3,
                209,
                111,
                195,
                242,
                203,
                225,
                46,
                13,
                32,
                160,
                126,
                209,
                130,
                160,
                242,
                215,
                242,
                75,
                77,
                42,
                189,
                32,
                113,
                65,
                124,
                69,
                228,
                114,
                235,
                175,
                124,
                170,
                215,
                232,
                133,
                205
            ],
            52: [
                116,
                50,
                86,
                186,
                50,
                220,
                251,
                89,
                192,
                46,
                86,
                127,
                124,
                19,
                184,
                233,
                151,
                215,
                22,
                14,
                59,
                145,
                37,
                242,
                203,
                134,
                254,
                89,
                190,
                94,
                59,
                65,
                124,
                113,
                100,
                233,
                235,
                121,
                22,
                76,
                86,
                97,
                39,
                242,
                200,
                220,
                101,
                33,
                239,
                254,
                116,
                51
            ],
            54: [
                183,
                26,
                201,
                87,
                210,
                221,
                113,
                21,
                46,
                65,
                45,
                50,
                238,
                184,
                249,
                225,
                102,
                58,
                209,
                218,
                109,
                165,
                26,
                95,
                184,
                192,
                52,
                245,
                35,
                254,
                238,
                175,
                172,
                79,
                123,
                25,
                122,
                43,
                120,
                108,
                215,
                80,
                128,
                201,
                235,
                8,
                153,
                59,
                101,
                31,
                198,
                76,
                31,
                156
            ],
            56: [
                106,
                120,
                107,
                157,
                164,
                216,
                112,
                116,
                2,
                91,
                248,
                163,
                36,
                201,
                202,
                229,
                6,
                144,
                254,
                155,
                135,
                208,
                170,
                209,
                12,
                139,
                127,
                142,
                182,
                249,
                177,
                174,
                190,
                28,
                10,
                85,
                239,
                184,
                101,
                124,
                152,
                206,
                96,
                23,
                163,
                61,
                27,
                196,
                247,
                151,
                154,
                202,
                207,
                20,
                61,
                10
            ],
            58: [
                82,
                116,
                26,
                247,
                66,
                27,
                62,
                107,
                252,
                182,
                200,
                185,
                235,
                55,
                251,
                242,
                210,
                144,
                154,
                237,
                176,
                141,
                192,
                248,
                152,
                249,
                206,
                85,
                253,
                142,
                65,
                165,
                125,
                23,
                24,
                30,
                122,
                240,
                214,
                6,
                129,
                218,
                29,
                145,
                127,
                134,
                206,
                245,
                117,
                29,
                41,
                63,
                159,
                142,
                233,
                125,
                148,
                123
            ],
            60: [
                107,
                140,
                26,
                12,
                9,
                141,
                243,
                197,
                226,
                197,
                219,
                45,
                211,
                101,
                219,
                120,
                28,
                181,
                127,
                6,
                100,
                247,
                2,
                205,
                198,
                57,
                115,
                219,
                101,
                109,
                160,
                82,
                37,
                38,
                238,
                49,
                160,
                209,
                121,
                86,
                11,
                124,
                30,
                181,
                84,
                25,
                194,
                87,
                65,
                102,
                190,
                220,
                70,
                27,
                209,
                16,
                89,
                7,
                33,
                240
            ],
            62: [
                65,
                202,
                113,
                98,
                71,
                223,
                248,
                118,
                214,
                94,
                0,
                122,
                37,
                23,
                2,
                228,
                58,
                121,
                7,
                105,
                135,
                78,
                243,
                118,
                70,
                76,
                223,
                89,
                72,
                50,
                70,
                111,
                194,
                17,
                212,
                126,
                181,
                35,
                221,
                117,
                235,
                11,
                229,
                149,
                147,
                123,
                213,
                40,
                115,
                6,
                200,
                100,
                26,
                246,
                182,
                218,
                127,
                215,
                36,
                186,
                110,
                106
            ],
            64: [
                45,
                51,
                175,
                9,
                7,
                158,
                159,
                49,
                68,
                119,
                92,
                123,
                177,
                204,
                187,
                254,
                200,
                78,
                141,
                149,
                119,
                26,
                127,
                53,
                160,
                93,
                199,
                212,
                29,
                24,
                145,
                156,
                208,
                150,
                218,
                209,
                4,
                216,
                91,
                47,
                184,
                146,
                47,
                140,
                195,
                195,
                125,
                242,
                238,
                63,
                99,
                108,
                140,
                230,
                242,
                31,
                204,
                11,
                178,
                243,
                217,
                156,
                213,
                231
            ],
            66: [
                5,
                118,
                222,
                180,
                136,
                136,
                162,
                51,
                46,
                117,
                13,
                215,
                81,
                17,
                139,
                247,
                197,
                171,
                95,
                173,
                65,
                137,
                178,
                68,
                111,
                95,
                101,
                41,
                72,
                214,
                169,
                197,
                95,
                7,
                44,
                154,
                77,
                111,
                236,
                40,
                121,
                143,
                63,
                87,
                80,
                253,
                240,
                126,
                217,
                77,
                34,
                232,
                106,
                50,
                168,
                82,
                76,
                146,
                67,
                106,
                171,
                25,
                132,
                93,
                45,
                105
            ],
            68: [
                247,
                159,
                223,
                33,
                224,
                93,
                77,
                70,
                90,
                160,
                32,
                254,
                43,
                150,
                84,
                101,
                190,
                205,
                133,
                52,
                60,
                202,
                165,
                220,
                203,
                151,
                93,
                84,
                15,
                84,
                253,
                173,
                160,
                89,
                227,
                52,
                199,
                97,
                95,
                231,
                52,
                177,
                41,
                125,
                137,
                241,
                166,
                225,
                118,
                2,
                54,
                32,
                82,
                215,
                175,
                198,
                43,
                238,
                235,
                27,
                101,
                184,
                127,
                3,
                5,
                8,
                163,
                238
            ]
        },
        _microFormatInformation = [
            17477,
            16754,
            20011,
            19228,
            21934,
            20633,
            24512,
            23287,
            26515,
            25252,
            28157,
            26826,
            30328,
            29519,
            31766,
            31009,
            1758,
            1001,
            3248,
            2439,
            5941,
            4610,
            7515,
            6252,
            9480,
            8255,
            12134,
            10833,
            13539,
            12756,
            16013,
            15290
        ],
        _versionInformation = [
            31892,
            34236,
            39577,
            42195,
            48118,
            51042,
            55367,
            58893,
            63784,
            68472,
            70749,
            76311,
            79154,
            84390,
            87683,
            92361,
            96236,
            102084,
            102881,
            110507,
            110734,
            117786,
            119615,
            126325,
            127568,
            133589,
            136944,
            141498,
            145311,
            150283,
            152622,
            158308,
            161089
        ],
        
        _Array = Array,
        _String = String,
        _YArray = Y.Array,
        _YAsync = Y.Async,
        _YBase = Y.Base,
        _YLang = Y.Lang,
        _YQrCode = Y.namespace('QrCode'),
        
        _ceil = Math.ceil,
        _each = Y.each,
        _floor = Math.floor,
        _isArray = _YLang.isArray,
        _indexOf = _YArray.indexOf,
        _isUndefined = _YLang.isUndefined,
        _iterate = _YArray.iterate,
        _map = _YArray.map,
        _max = Math.max,
        _min = Math.min,
        _mix = Y.mix,
        _numberToBinaryString,
        _parseInt = parseInt,
        _reduce = _YArray.reduce,
        _soon = Y.soon,
        
        _cachedIndexOf = Y.cached(_indexOf),
        _maskFunctions = [
            function (x, y) {
                return (x + y) % 2 === 0;
            },
            function (x, y) {
                return y % 2 === 0;
            },
            function (x, y) {
                return x % 3 === 0;
            },
            function (x, y) {
                return (x + y) % 3 === 0;
            },
            function (x, y) {
                return (_floor(x / 3) + _floor(y / 2)) % 2 === 0;
            },
            function (x, y) {
                var product = x * y;
                return product % 2 + product % 3 === 0;
            },
            function (x, y) {
                var product = x * y;
                return (product % 2 + product % 3) % 2 === 0;
            },
            function (x, y) {
                return ((x + y) % 2 + (x * y) % 3) % 2 === 0;
            }
        ],
        _microMaskFunctions = [
            _maskFunctions[1],
            _maskFunctions[4],
            _maskFunctions[6],
            _maskFunctions[7]
        ],
        
        _Data = _YBase.create('qr-code-data', _YBase, [], {}, {
            ATTRS: {
                type: {
                    validator: function (value) {
                        return !!_dataTypes[value];
                    },
                    writeOnce: _string_initOnly
                },
                value: {
                    value: null,
                    writeOnce: _string_initOnly
                }
            },
            Type: _dataTypes
        }),
        
        _GeneratorBase = _YBase.create('qr-code-generator-base', _YBase, [], {
            applyMask: function (matrix, dataMatrix, maskFunction, quietZoneSize, size, callbackFunction) {
                var maskRowRun = [],
                    i,
                    y = quietZoneSize,
                    
                    maskRowFunction = function (success) {
                        _soon(function () {
                            var index,
                                value,
                                x = size - quietZoneSize - 1;
                                
                            while (x >= quietZoneSize) {
                                index = x + y * size;
                                value = dataMatrix[index];
                                
                                if (!_isUndefined(value)) {
                                    matrix[index] = maskFunction(x - quietZoneSize, y - quietZoneSize) ? !value : value;
                                }
                                
                                x -= 1;
                            }
                            
                            y += 1;
                            success();
                        });
                    };
                    
                for (i = size - quietZoneSize - 1; i >= y; i -= 1) {
                    maskRowRun.push(maskRowFunction)
                }
                
                _YAsync.runQueue(maskRowRun).on('complete', function () {
                    _soon(function () {
                        callbackFunction(matrix);
                    });
                });
            },
            drawAlignmentPattern: function (matrix, centerX, centerY, size, overwrite) {
                var endX = centerX + 2,
                    endY = centerY + 2,
                    index,
                    startX = centerX - 2,
                    startY = centerY - 2,
                    x,
                    y;
                    
                for (x = startX; x <= endX; x += 1) {
                    for (y = startY; y <= endY; y += 1) {
                        index = x + y * size;
                        if (overwrite || _isUndefined(matrix[index])) {
                            matrix[index] = x === startX || x === endX || y === startY || y === endY || x === centerX && y === centerY;
                        }
                    }
                }
            },
            drawFinderPattern: function (matrix, centerX, centerY, size, overwrite) {
                var endX = centerX + 3,
                    endY = centerY + 3,
                    index,
                    startX = centerX - 3,
                    startY = centerY - 3,
                    x,
                    y;
                    
                for (x = startX - 1; x <= endX + 1; x += 1) {
                    for (y = startY - 1; y <= endY + 1; y += 1) {
                        index = x + y * size;
                        if (overwrite || _isUndefined(matrix[index])) {
                            matrix[index] = x >= startX && x <= endX && y >= startY && y <= endY && (x === startX || x === endX || y === startY || y === endY) || x >= centerX - 1 && x <= centerX + 1 && y >= centerY - 1 && y <= centerY + 1;
                        }
                    }
                }
            },
            drawFormatInformation: function (matrix, binaryString, micro, quietZoneSize, size, overwrite) {
                var i,
                    index,
                    value,
                    x0 = quietZoneSize + 8,
                    x1 = size - quietZoneSize - 1,
                    y0 = quietZoneSize,
                    y1 = quietZoneSize + 8;
                
                if (micro) {
                    y0 += 1;
                }
                
                for (i = 0; i < 15; i += 1) {
                    value = binaryString.charAt(14 - i) === '1';
                    
                    index = x0 + y0 * size;
                    if (overwrite || _isUndefined(matrix[index])) {
                        matrix[index] = value;
                    }
                    
                    if (!micro) {
                        index = x1 + y1 * size;
                        if (overwrite || _isUndefined(matrix[index])) {
                            matrix[index] = value;
                        }
                    
                        if (i < 7) {
                            y0 += 1;

                            if (i === 5) {
                                y0 += 1;
                            }
                        } else {
                            x0 -= 1;

                            if (i === 8) {
                                x0 -= 1;
                            }
                        }

                        if (i < 7) {
                            x1 -= 1;
                        } else if (i === 7) {
                            x1 = quietZoneSize + 8;
                            y1 = size - quietZoneSize - 8;

                            index = x1 + y1 * size;
                            if (overwrite || _isUndefined(matrix[index])) {
                                matrix[index] = true;
                            }

                            y1 += 1;
                        } else {
                            y1 += 1;
                        }
                    } else if (i < 7) {
                        y0 -= 1;
                    } else {
                        x0 -= 1;
                    }
                }
            },
            drawTimingPattern: function (matrix, coordinate, size, overwrite) {
                var i,
                    index;
                
                for (i = 0; i < size; i += 1) {
                    index = coordinate + i * size;
                    if (overwrite || _isUndefined(matrix[index])) {
                        matrix[index] = !(i % 2);
                    }
                    
                    index = i + coordinate * size;
                    if (overwrite || _isUndefined(matrix[index])) {
                        matrix[index] = !(i % 2);
                    }
                }
            },
            drawVersionInformation: function (matrix, binaryString, quietZoneSize, size, overwrite) {
                var i,
                    index,
                    value,
                    x0 = size - quietZoneSize - 11,
                    x1 = quietZoneSize,
                    y0 = quietZoneSize,
                    y1 = size - quietZoneSize - 11;
                    
                for (i = 0; i < 18; i += 1) {
                    value = binaryString.charAt(i) === '1';
                    
                    index = x0 + y0 * size;
                    if (overwrite || _isUndefined(matrix[index])) {
                        matrix[index] = value;
                    }
                    
                    index = x1 + y1 * size;
                    if (overwrite || _isUndefined(matrix[index])) {
                        matrix[index] = value;
                    }
                    
                    if ((i + 1) % 3) {
                        x0 += 1;
                        y1 += 1;
                    } else {
                        x0 -= 2;
                        x1 += 1;
                        y0 += 1;
                        y1 -= 2;
                    }
                }
            },
            drawQuietZone: function (matrix, quietZoneSize, size, overwrite) {
                var farQuietZoneCoordinate = size - quietZoneSize,
                    index,
                    x,
                    y;
                    
                for (x = 0; x < size; x += 1) {
                    for (y = 0; y < quietZoneSize; y += 1) {
                        index = x + y * size;
                        if (overwrite || _isUndefined(matrix[index])) {
                            matrix[index] = false;
                        }
                    }
                    
                    if (x < quietZoneSize || x >= farQuietZoneCoordinate) {
                        for (y = quietZoneSize; y < farQuietZoneCoordinate; y += 1) {
                            index = x + y * size;
                            if (overwrite || _isUndefined(matrix[index])) {
                                matrix[index] = false;
                            }
                        }
                    }
                    
                    for (y = farQuietZoneCoordinate; y < size; y += 1) {
                        index = x + y * size;
                        if (overwrite || _isUndefined(matrix[index])) {
                            matrix[index] = false;
                        }
                    }
                }
            },
            evaluateMatrix: function (matrix, quietZoneSize, size, callbackFunction) {
                // TODO
                callbackFunction(0);
            },
            evaluateMicroMatrix: function (matrix, quietZoneSize, size, callbackFunction) {
                // TODO
                callbackFunction(0);
            },
            formatBinaryString: function (binaryString, callbackFunction) {
                var blockCount,
                    blockRun = [],
                    blocks,
                    dataBlockLength,
                    dataBlockShiftIndex,
                    dataCodewords,
                    errorCorrectionBlockLength,
                    me = this,
                    missingCodewordCount,
                    
                    blockIterationFunction = function (dataBlockLength) {
                        return function (dataCodeword, index, dataCodewords) {
                            blockRun.push(function (success) {
                                _soon(function () {
                                    // Split the dataCodewords array into smaller blocks.
                                    var dataBlock = dataCodewords.slice(index, index + dataBlockLength);
                                    
                                    me.generateErrorCorrectionBlock(dataBlock, errorCorrectionBlockLength, function (errorCorrectionBlock) {
                                        success([
                                            dataBlock,
                                            errorCorrectionBlock
                                        ]);
                                    });
                                });
                            });
                        };
                    },
                    
                    interleaveCodewordsFunction = function (blocksIndex, codewordIndex) {
                        blockRun.push(function (success) {
                            _soon(function () {
                                success(_reduce(blocks, '', function (binaryString, blocks) {
                                    return binaryString + (blocks[blocksIndex][codewordIndex] || '');
                                }));
                            });
                        });
                    };
                
                _YAsync.runQueue(function (success) {
                    _soon(function () {
                        var codewordCount,
                            errorCorrection = me.get('errorCorrection'),
                            remainder,
                            version = String(me.get('version'));

                        if (version.charAt(0) === 'M') {
                            // Sanitize error correction value for Micro QR Codes.
                            if (version === 'M1') {
                                errorCorrection = 'E';
                            } else if (version !== 'M4') {
                                if (errorCorrection === 'H' || errorCorrection === 'Q') {
                                    errorCorrection = 'M';
                                }
                            } else if (errorCorrection === 'H') {
                                errorCorrection = 'Q';
                            }
                            
                            // Append Micro QR Code terminator.
                            binaryString += _Array(2 + 2 * +version.charAt(1)).join('0');
                        } else {
                            // Sanitize error correction for QR Codes.
                            if (errorCorrection === 'E') {
                                errorCorrection = 'L';
                            }
                            
                            // Append QR Code terminator.
                            binaryString += '0000';
                        }
                        
                        me._set('errorCorrection', errorCorrection);

                        remainder = binaryString.length % 8;

                        // Pad with 0 bits to fill out remainder.
                        if (version === 'M1' || version === 'M3') {
                            // M1 and M3 versions end with a 4 bit codeword.
                            if (remainder < 4) {
                                binaryString += _Array(5 - remainder).join('0');
                            } else if (remainder > 4) {
                                binaryString += _Array(13 - remainder).join('0');
                            }
                        } else if (remainder) {
                            binaryString += _Array(9 - remainder).join('0');
                        }

                        // Get info required to format binaryData.
                        codewordCount = _codewordCount[version][errorCorrection];
                        blockCount = codewordCount[1];
                        dataBlockLength = codewordCount[2];
                        dataBlockShiftIndex = blockCount * dataBlockLength;
                        errorCorrectionBlockLength = codewordCount[3];
                        codewordCount = codewordCount[0];

                        missingCodewordCount = codewordCount - _ceil(binaryString.length / 8);

                        if (missingCodewordCount < 0) {
                            success.fail('Too much data.');
                        } else {
                            success();
                        }
                    });
                }, function (success) {
                    _soon(function () {
                        // Add padding codewords to fill up available space.
                        var i;
                        
                        for (i = 0; i < missingCodewordCount; i += 1) {
                            binaryString += (i % 2) ? '00010001' : '11101100';
                        }
                        
                        // Split the binary string into an array of codewords.
                        dataCodewords = binaryString.match(/.{1,8}/g);
                        binaryString = '';
                        
                        success();
                    });
                }, function (success) {
                    _soon(function () {
                        // Get ready to generate the first group of data blocks and error correction blocks.
                        _iterate(dataCodewords.slice(0, dataBlockShiftIndex), dataBlockLength, blockIterationFunction(dataBlockLength));
                        // The second group of blocks contains an extra codeword.
                        dataBlockLength += 1;
                        success();
                    });
                }, function (success) {
                    _soon(function () {
                        // Get ready to generate the second group of data blocks and error correction blocks.
                        _iterate(dataCodewords.slice(dataBlockShiftIndex), dataBlockLength, blockIterationFunction(dataBlockLength));
                        dataCodewords = null;
                        success();
                    });
                }, function (success) {
                    _soon(function () {
                        // Generate data blocks and error correction blocks.
                        _YAsync.runAll(blockRun).on('complete', function (eventFacade) {
                            blockRun = [];
                            blocks = eventFacade.value;
                            success();
                        });
                    });
                }, function (success) {
                    _soon(function () {
                        var i;
                        
                        // Get ready to interleave data block codewords.
                        for (i = 0; i < dataBlockLength; i += 1) {
                            interleaveCodewordsFunction(0, i);
                        }
                        
                        success()
                    });
                }, function (success) {
                    _soon(function () {
                        var i;
                        
                        // Get ready to interleave error correction block codewords.
                        for (i = 0; i < errorCorrectionBlockLength; i += 1) {
                            interleaveCodewordsFunction(1, i);
                        }
                        
                        success();
                    });
                }, function (success) {
                    _soon(function () {
                        // Interleave codewords.
                        _YAsync.runAll(blockRun).on('complete', function (eventFacade) {
                            binaryString = eventFacade.value.join('');
                            success();
                        });
                    });
                }).on('complete', function (eventFacade) {
                    _soon(function () {
                        if (eventFacade.failed) {
                            callbackFunction(eventFacade.error);
                        } else {
                            callbackFunction(null, binaryString);
                        }
                    });
                });
            },
            generate: function (callbackFunction) {
                var data,
                    me = this;
                
                _YAsync.runQueue(function (success) {
                    _soon(function () {
                        me.getBinaryString(function (binaryString) {
                            data = binaryString;
                            success();
                        });
                    });
                }, function (success) {
                    _soon(function () {
                        me.formatBinaryString(data, function (error, binaryString) {
                            if (error) {
                                success.fail(error);
                            } else {
                                data = binaryString;
                                success();
                            }
                        });
                    });
                }, function (success) {
                    _soon(function () {
                        me.generateMatrix(data, function (matrix, size) {
                            data = [
                                matrix,
                                size
                            ];
                            success();
                        });
                    });
                }).on('complete', function (eventFacade) {
                    _soon(function () {
                        if (eventFacade.failed) {
                            callbackFunction(eventFacade.error);
                        } else {
                            callbackFunction(null, data[0], data[1]);
                        }
                    });
                });
            },
            generateDataMatrix: function (matrix, binaryString, coordinate, quietZoneSize, size, callbackFunction) {
                var codewords = binaryString.match(/.{1,8}/g),
                    dataMatrix = _Array(matrix.length),
                    direction = 1,
                    drawColumnRun = [],
                    i,
                    x = size - quietZoneSize - 1,
                    
                    codeword = codewords.shift(),
                    codewordIndex = 0,
                    
                    drawCodewordBit = function (index) {
                        if (codewordIndex > 7) {
                            codeword = codewords.shift();
                            codewordIndex = 0;
                        }
                        
                        dataMatrix[index] = codeword && codeword.charAt(codewordIndex) === '1' || false;
                        codewordIndex += 1;
                    },
                    
                    drawColumnFunction = function (success) {
                        _soon(function () {
                            var index,
                                y;
                                
                            for (y = direction ? size - quietZoneSize - 1 : quietZoneSize; direction && y >= quietZoneSize || !direction && y < size - quietZoneSize; y += (direction ? -1 : 1)) {
                                index = x + y * size;
                                if (_isUndefined(matrix[index])) {
                                    drawCodewordBit(index);
                                }
                                
                                index -= 1;
                                if (_isUndefined(matrix[index])) {
                                    drawCodewordBit(index);
                                }
                            }
                            
                            direction = !direction;
                            x -= 2;
                            
                            if (x === coordinate) {
                                x -= 1;
                            }
                            
                            success();
                        });
                    };
                    
                binaryString = '';
                
                for (i = quietZoneSize; i <= x; i += 2) {
                    drawColumnRun.push(drawColumnFunction);
                }
                
                _YAsync.runQueue(drawColumnRun).on('complete', function () {
                    _soon(function() {
                        callbackFunction(dataMatrix);
                    });
                });
            },
            generateErrorCorrectionBlock: function (dataBlock, errorCorrectionBlockLength, callbackFunction) {
                var coefficientRun = [],
                    errorCorrectionBlock,
                    generatorAlphaIndicies = _generatorAlphaIndicies[errorCorrectionBlockLength],
                    polynomialAlphaIndicies,
                    
                    coefficientIterationFunction = function (success) {
                        _soon(function () {
                            var leadingPolynomialAlphaIndex = polynomialAlphaIndicies.shift() || 0;
                            
                            _each(generatorAlphaIndicies, function (generatorAlphaIndex, index) {
                                var alphaIndex = _cachedIndexOf(_alpha, _alpha[(generatorAlphaIndex + leadingPolynomialAlphaIndex) % 255] ^ (_alpha[polynomialAlphaIndicies[index]] || 0));
                                polynomialAlphaIndicies[index] = alphaIndex === -1 ? null : alphaIndex;
                            });
                            
                            success();
                        });
                    };
                    
                _YAsync.runQueue(function (success) {
                    _soon(function () {
                        polynomialAlphaIndicies = _map(dataBlock, function (binaryCodeword) {
                            var alphaIndex = _cachedIndexOf(_alpha, _parseInt(binaryCodeword, 2));
                            return alphaIndex === -1 ? null : alphaIndex;
                        }).concat(_Array(errorCorrectionBlockLength));
                        
                        success();
                    });
                }, function (success) {
                    _soon(function () {
                        var dataBlockLength = dataBlock.length,
                            i;
                        
                        for (i = 0; i < dataBlockLength; i += 1) {
                            coefficientRun.push(coefficientIterationFunction);
                        }
                        
                        success();
                    });
                }, function (success) {
                    _soon(function () {
                        _YAsync.runQueue(coefficientRun).on('complete', success);
                    });
                }, function (success) {
                    _soon(function () {
                        errorCorrectionBlock = _map(polynomialAlphaIndicies, function (alphaIndex) {
                            return _numberToBinaryString(_alpha[alphaIndex] || 0, 8);
                        });
                        success();
                    });
                }).on('complete', function () {
                    _soon(function () {
                        callbackFunction(errorCorrectionBlock);
                    });
                });
            },
            generateMatrix: function (binaryString, callbackFunction) {
                var me = this,
                    size = me.getSize(),
                    version = String(me.get('version')),
                    
                    formatInformation,
                    initialDataMatrix,
                    matrix = _Array(size * size),
                    micro = version.charAt(0) === 'M',
                    quietZoneSize = micro ? 2 : 4;
                    
                _YAsync.runQueue(function (success) {
                    _soon(function () {
                        me.drawQuietZone(matrix, quietZoneSize, size);
                        success();
                    });
                }, function (success) {
                    _soon(function () {
                        var coordinate = quietZoneSize + 3;
                        me.drawFinderPattern(matrix, coordinate, coordinate, size);
                        success();
                    });
                }, function (success) {
                    if (micro) {
                        success();
                    } else {
                        _soon(function () {
                            me.drawFinderPattern(matrix, size - quietZoneSize - 4, quietZoneSize + 3, size);
                            success();
                        });
                    }
                }, function (success) {
                    if (micro) {
                        success();
                    } else {
                        _soon(function () {
                            me.drawFinderPattern(matrix, quietZoneSize + 3, size - quietZoneSize - 4, size);
                            success();
                        });
                    }
                }, function (success) {
                    _soon(function () {
                        me.drawTimingPattern(matrix, micro ? 2 : 10, size);
                        success();
                    });
                }, function (success) {
                    _soon(function () {
                        var alignmentPatternRun = [];
                        
                        _each(me.getAlignmentPatternCoordinates(quietZoneSize), function (alignmentPatternCoordinates) {
                            alignmentPatternRun.push(function (success) {
                                _soon(function () {
                                    me.drawAlignmentPattern(matrix, alignmentPatternCoordinates[0], alignmentPatternCoordinates[1], size);
                                    success();
                                });
                            });
                        });
                        
                        _YAsync.runAll(alignmentPatternRun).on('complete', success);
                    });
                }, function (success) {
                    if (micro || +version < 7) {
                        success();
                    } else {
                        _soon(function () {
                            me.drawVersionInformation(matrix, _numberToBinaryString(_versionInformation[+version - 7], 18), quietZoneSize, size);
                            success();
                        });
                    }
                }, function (success) {
                    _soon(function () {
                        me.drawFormatInformation(matrix, _Array(16).join('0'), micro, quietZoneSize, size);
                        success();
                    });
                }, function (success) {
                    _soon(function () {
                        me.generateDataMatrix(matrix, binaryString, micro ? 2 : 10, quietZoneSize, size, function (dataMatrix) {
                            initialDataMatrix = dataMatrix;
                            success();
                        });
                    });
                }, function (success) {
                    _soon(function () {
                        _YAsync.runQueue(_map(micro ? _microMaskFunctions : _maskFunctions, function (maskFunction) {
                            return function (success) {
                                _soon(function () {
                                    me.applyMask(matrix.concat(), initialDataMatrix, maskFunction, quietZoneSize, size, success);
                                });
                            };
                        })).on('complete', function (eventFacade) {
                            var matrices = eventFacade.value;
                            
                            _YAsync.runAll(_map(matrices, function (matrix) {
                                return function (success) {
                                    _soon(function () {
                                        if (micro) {
                                            me.evaluateMicroMatrix(matrix, quietZoneSize, size, success);
                                        } else {
                                            me.evaluateMatrix(matrix, quietZoneSize, size, success);
                                        }
                                    });
                                };
                            })).on('complete', function (eventFacade) {
                                var bestIndex,
                                    errorCorrection = me.get('errorCorrection'),
                                    values = eventFacade.value;
                                 
                                if (micro) {
                                    bestIndex = _indexOf(values, _max.apply(Math, values));
                                    
                                    switch (version) {
                                        case 'M1':
                                            formatInformation = 0;
                                            break;
                                        case 'M2':
                                            formatInformation = 1;
                                            break;
                                        case 'M3':
                                            formatInformation = 3;
                                            break;
                                        case 'M4':
                                            formatInformation = 5;
                                            break;
                                    }
                                    
                                    if (errorCorrection === 'M') {
                                        formatInformation += 1;
                                    } else if (errorCorrection === 'Q') {
                                        formatInformation += 2;
                                    }
                                    
                                    formatInformation = _numberToBinaryString(_microFormatInformation[_parseInt(_numberToBinaryString(formatInformation, 3) + _numberToBinaryString(bestIndex, 2), 2)], 15);
                                } else {
                                    bestIndex = _indexOf(values, _min.apply(Math, values));
                                    
                                    switch (errorCorrection) {
                                        case 'H':
                                            formatInformation = '10';
                                            break;
                                        case 'L':
                                            formatInformation = '01';
                                            break;
                                        case 'M':
                                            formatInformation = '00';
                                            break;
                                        case 'Q':
                                            formatInformation = '11';
                                            break;
                                    }
                                    
                                    formatInformation = numberToBinaryString(formatInformation[_parseInt(formatInformation + _numberToBinaryString(bestIndex, '3'), 2)], 15);
                                }
                                
                                matrix = matrices[bestIndex];
                                success();
                            });
                        });
                    });
                }, function (success) {
                    _soon(function () {
                        me.drawFormatInformation(matrix, formatInformation, micro, quietZoneSize, size, true);
                        success();
                    });
                }).on ('complete', function () {
                    _soon(function () {
                        callbackFunction(matrix, size);
                    });
                });
            },
            getAlignmentPatternCoordinates: function (quietZoneSize) {
                var version = String(this.get('version'));
                if (version.charAt(0) === 'M' || version === '1') {
                    return [];
                }

                var alignmentPatternCoordinates = [],
                    alignmentPatternLocation = [
                        6
                    ].concat(_alignmentPatternLocations[+version - 2]),
                    alignmentPatternLocationLengthMinusOne = alignmentPatternLocation.length - 1;

                _each(alignmentPatternLocation, function(x, xIndex) {
                    _each(alignmentPatternLocation, function(y, yIndex) {
                        if ((xIndex || yIndex) && (xIndex || yIndex !== alignmentPatternLocationLengthMinusOne) && (xIndex !== alignmentPatternLocationLengthMinusOne || yIndex)) {
                            alignmentPatternCoordinates.push([
                                quietZoneSize + x,
                                quietZoneSize + y
                            ]);
                        }
                    });
                });

                return alignmentPatternCoordinates;
            },
            getBinaryString: function (callbackFunction) {
                var me = this,
                    version = me.get('version');
                
                _YAsync.runAll(_map(me.get('data'), function (data) {
                    return function (success) {
                        _soon(function () {
                            success(data.toBinaryString(version));
                        });
                    };
                })).on('complete', function (eventFacade) {
                    _soon(function () {
                        callbackFunction(eventFacade.value.join(''));
                    });
                });
            },
            getSize: function () {
                var version = String(this.get('version'));

                if (version.charAt(0) === 'M') {
                  return 12 + +version.charAt(1) * 3;
                }

                return 25 + +version * 4;
            },
            initializer: function () {
                
            }
        }, {
            ATTRS: {
                data: {
                    setter: function (value) {
                        if (!_isArray(value)) {
                            value = [
                                value
                            ];
                        }
                        
                        return value;
                    },
                    value: [],
                    writeOnce: 'initOnly'
                },
                errorCorrection: {
                    validator: function (value) {
                        if (value === 'E' || value === 'H' || value === 'L' || value === 'M' || value === 'Q') {
                            return true;
                        }
                        
                        return false;
                    },
                    value: 'M',
                    writeOnce: 'initOnly'
                },
                version: {
                    value: '1',
                    writeOnce: 'initOnly'
                }
            }
        }),
        
        _NumericData = _YBase.create('qr-code-numeric-data', _Data, [], {
            toBinaryString: function (version) {
                version = String(version);
                
                var characterCountIndicatorBitLength,
                    modeIndicator,
                    value = this.get('value'),
                    valueBinaryString = _reduce(value.match(/.{1,3}/g), '', function (binaryString, value) {
                        return binaryString + _numberToBinaryString(value, value.length >= 3 ? 10 : (value.length <= 1 ? 4 : 7));
                    });
                
                if (version.charAt(0) === 'M') {
                    version = +version.charAt(1);
                    characterCountIndicatorBitLength = version + 2;
                    modeIndicator = _Array(version).join(0);
                } else {
                    version = +version;
                    
                    if (version <= 9) {
                        characterCountIndicatorBitLength = 10;
                    } else if (version <= 26) {
                        characterCountIndicatorBitLength = 12;
                    } else {
                        characterCountIndicatorBitLength = 14;
                    }
                    
                    modeIndicator = '0001';
                }
                
                return modeIndicator + _numberToBinaryString(value.length, characterCountIndicatorBitLength) + valueBinaryString;
            }
        }, {
            ATTRS: {
                type: {
                    readonly: true,
                    value: _string_numeric
                },
                value: {
                    setter: function (value) {
                        return _String(value).replace(/[^\d]/g, '');
                    },
                    value: _string__empty,
                    writeOnce: _string_initOnly
                }
            }
        });
    
    _numberToBinaryString = function (number, length) {
        number = (+number).toString(2);
        
        var numberLength = number.length;
        if (numberLength > length) {
            return null;
        }
        
        return _Array(length - numberLength + 1).join(0) + number;
    };
    
    _mix(_YQrCode, {
        Data: _Data,
        GeneratorBase: _GeneratorBase,
        NumericData: _NumericData,
        numberToBinaryString: _numberToBinaryString
    });
}(Y));